Step-1
----------------------------------------------------

Dockerfile /////////////////////////////////////////////////////////////////////////////////////
----------------------
FROM php:7.4-fpm

# Arguments defined in docker-compose.yml///////////////////////////////////////////////////////

ARG user
ARG uid

# Install system dependencies//////////////////////////////////////////////////////////////////

RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip


# Clear cache ///////////////////////////////////////////////////////////////////////////////

RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions ///////////////////////////////////////////////////////////////////

RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd


# Get latest Composer ///////////////////////////////////////////////////////////////////////

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands //////////////////////////////////

RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer && \
    chown -R $user:$user /home/$user


# Set working directory ////////////////////////////////////////////////////////////////////

WORKDIR /var/www

USER $user


Step-2
----------------------------------------------
mkdir -p docker-compose/nginx
nano docker-compose/nginx/travellist.conf

in docker-compose/nginx/travellist.conf ///////////////////////////////////////////////////
------------------------------------------------
server {
    listen 80;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}

Step-3
------------------------------------------------
	mkdir docker-compose/mysql
	nano docker-compose/mysql/init_db.sql


in docker-compose/mysql/db_init.sql ///////////////////////////////////////////////////////
-----------------------------------------------
DROP TABLE IF EXISTS `places`;

CREATE TABLE `places` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `visited` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO `places` (name, visited) VALUES ('Berlin',0),('Budapest',0),('Cincinnati',1),('Denver',0),('Helsinki',0),('Lisbon',0),('Moscow',1),('Nairobi',0),('Oslo',1),('Rio',0),('Tokyo',0);


Step-4: Creating a Multi-Container Environment with Docker Compose
          
nano docker-compose.yml


in docker-compose.yml ////////////////////////////////////////////////////////////////////
-------------------------------
version: "3.7"
services:
  app:
    build:
      args:
        user: sammy
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: travellist
    container_name: travellist-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
    networks:
      - travellist

  db:
    image: mysql:8.0
    container_name: travellist-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
    networks:
      - travellist

  nginx:
    image: nginx:alpine
    container_name: travellist-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    networks:
      - travellist

networks:
  travellist:
    driver: bridge




Step
------------------
Build the app image with the following command: ///////////////////////////////////////////////////////

	docker-compose build app

When the build is finished, you can run the environment in background mode with: /////////////////////

	docker-compose up -d


This will run your containers in the background. To show information about the state of your active services, run: ///////////////

	    docker-compose ps


You can use the docker-compose exec command to execute commands in the service containers, such as an ls -l to show detailed information about files in the application directory: ///////////////////////////////////////////////////////

	docker-compose exec app ls -l

We’ll now run composer install to install the application dependencies: /////////////////////////////////////////////////////////

	    docker-compose exec app rm -rf vendor composer.lock
    	    docker-compose exec app composer install


The last thing we need to do before testing the application is to generate a unique application key with the artisan Laravel command-line tool. This key is used to encrypt user sessions and other sensitive data: ///////////////////////////////////////////////////////

	docker-compose exec app php artisan key:generate

Now go to your browser and access your server’s domain name or IP address on port 8000: ///////////////////////////////////////

	http://server_domain_or_IP:8000

You can use the logs command to check the logs generated by your services: ///////////////////////////////////////////////////

	    docker-compose logs nginx


If you want to pause your Docker Compose environment while keeping the state of all its services, run: //////////////////////

	docker-compose pause

You can then resume your services with: /////////////////////////////////////////////////////////////////////////////////////

	docker-compose unpause

To shut down your Docker Compose environment and remove all of its containers, networks, and volumes, run:  ////////////////

	docker-compose down




For more help: https://www.digitalocean.com/community/tutorials/how-to-install-and-set-up-laravel-with-docker-compose-on-ubuntu-22-04





